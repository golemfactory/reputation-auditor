version: "3.8"
volumes:
    db_data: {}
    pgadmin:
    redis-data:
services:
    traefik:
        image: traefik:v2.9.6
        ports:
            - "80:80"
            - "443:443"
            - "85:85"
        command:
            - "--providers.docker=true"
            - "--providers.docker.swarmmode=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.webinternal.address=:85"
            - "--entrypoints.web-secure.address=:443"
            - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
            - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
            - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
            - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
            - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
            - "--certificatesresolvers.letsencryptresolver.acme.email=${EMAIL}"
            - "--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json"
            - "--metrics.prometheus=true"
            - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
            - --metrics.prometheus.entryPoint=metrics
            - --entryPoints.metrics.address=:8080
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=reputation"
            - "traefik.http.routers.traefik.middlewares=traefik-compress"

        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./letsencrypt:/letsencrypt
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: on-failure

        networks:
            - reputation
    django:
        image: ghcr.io/golemfactory/golem-reputation-backend:latest
        env_file:
            - ./.envs/.django
        deploy:
            labels:
                - traefik.enable=true
                - "traefik.http.routers.django.rule=Host(`${DJANGO_HOST}`)"
                - traefik.http.routers.django.entrypoints=web
                - traefik.http.services.django.loadbalancer.server.port=8002
                - traefik.http.routers.django.service=django@docker
                - traefik.docker.network=reputation
                - traefik.http.routers.django.tls.certresolver=letsencryptresolver
                - "traefik.http.routers.django-web-secure.rule=Host(`${DJANGO_HOST}`)"
                - traefik.http.routers.django-web-secure.tls=true
                - traefik.http.routers.django-web-secure.entrypoints=web-secure
                - traefik.http.middlewares.django_compress.compress=true
                - traefik.http.routers.django-web-secure.middlewares=django_compress
                - traefik.http.routers.django.middlewares=django_compress
            replicas: 3
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: on-failure
        networks:
            - reputation
    redis:
        image: "redis:alpine"
        command: [sh, -c, "redis-server --maxclients 40000 --timeout 0 --save 300 500 --save 900 2000"]
        volumes:
            - redis-data:/data # Mounts the volume at /data in the container
        expose:
            - "6379"
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: on-failure
        networks:
            - reputation
    celery:
        image: ghcr.io/golemfactory/golem-reputation-backend-celery:latest
        env_file:
            - ./.envs/.django
        command: ["/bin/sh", "-c", "/wait-for-it.sh ${POSTGRES_DB} -- celery -A core worker -l INFO -Q default"]
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 2s
            restart_policy:
                condition: on-failure
        networks:
            - reputation
    uptime_worker:
        command:
            [
                "/bin/sh",
                "-c",
                "/wait-for-it.sh ${POSTGRES_DB} -- /reputation-backend/start.sh; celery -A core worker -l INFO -Q uptime -c 1",
            ]
        image: ghcr.io/golemfactory/golem-reputation-backend-celery-yagna:latest
        env_file:
            - ./.envs/.django
        healthcheck:
            test: /check_yagna.sh || exit 1
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 15s
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: any
        networks:
            - reputation
    benchmarker_worker:
        command:
            [
                "/bin/sh",
                "-c",
                "/wait-for-it.sh ${POSTGRES_DB} -- /reputation-backend/start.sh; cd /benchmark; npm i && npm run benchmark-scheduler -- -b vm",
            ]
        image: ghcr.io/golemfactory/golem-reputation-backend-celery-yagna:latest
        env_file:
            - ./.envs/.django
        volumes:
            - "./key.json:/key.json"
            - "./benchmarker-datadir:/root/.local/share/yagna/"
        healthcheck:
            test: /check_yagna.sh || exit 1
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 15s
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: any
        networks:
            - reputation
    benchmarker_worker014:
        command:
            [
                "/bin/sh",
                "-c",
                "/wait-for-it.sh ${POSTGRES_DB} -- /reputation-backend/start.sh; cd /benchmark; npm i && npm run benchmark-scheduler -- -b vm-nvidia -k benchmark-vm-nvidia-last-run",
            ]
        image: ghcr.io/golemfactory/golem-reputation-backend-celery-yagna:latest
        env_file:
            - ./.envs/.django
        volumes:
            - "./key014.json:/key.json"
            - "./benchmarker-datadir014:/root/.local/share/yagna/"
        healthcheck:
            test: /check_yagna.sh || exit 1
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 15s
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: any
        networks:
            - reputation
    ping_worker:
        command:
            [
                "/bin/sh",
                "-c",
                "/wait-for-it.sh ${POSTGRES_DB} -- /reputation-backend/start.sh; celery -A core worker -l INFO -Q pinger -c 1",
            ]
        image: ghcr.io/golemfactory/golem-reputation-backend-celery-yagna:latest
        env_file:
            - ./.envs/.django
        healthcheck:
            test: /check_yagna.sh || exit 1
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 15s
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: any
        networks:
            - reputation
    celery_beat:
        image: ghcr.io/golemfactory/golem-reputation-backend-celery-beat:latest
        command: celery -A core beat -l INFO
        env_file:
            - ./.envs/.django
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                failure_action: rollback
                delay: 10s
            restart_policy:
                condition: on-failure
        networks:
            - reputation

networks:
    reputation:
        driver: overlay
